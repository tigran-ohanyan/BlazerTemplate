@page "/tasks"
@using DialogService = Radzen.DialogService
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext;
@inject Radzen.DialogService DialogService

<RadzenDropZoneContainer TItem="TasksList" Data="tasks"
                         ItemSelector="@ItemSelector"
                         ItemRender="@OnItemRender"
                         CanDrop="@CanDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap" class="rz-p-12">
            <RadzenDropZone Value="Status.NotStarted" class="rz-display-flex rz-flex-column rz-background-color-warning-lighter rz-border-warning-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
                <ChildContent>
                    <RadzenText Text="Not started" TextStyle="TextStyle.Subtitle2" />
                </ChildContent>
                <Footer>
                    <div>
                        <RadzenButton Size="ButtonSize.ExtraSmall" Icon="add" ButtonStyle="ButtonStyle.Success" Click="@CreateItem" />
                    </div>
                </Footer>
            </RadzenDropZone>

            <RadzenDropZone Value="Status.Started" class="rz-display-flex rz-flex-column rz-background-color-info-lighter rz-border-info-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Started" TextStyle="TextStyle.Subtitle2" />
            </RadzenDropZone>

            <RadzenDropZone Value="Status.Completed" class="rz-display-flex rz-flex-column rz-background-color-success-lighter rz-border-success-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Completed" TextStyle="TextStyle.Subtitle2" />
            </RadzenDropZone>
            

            <RadzenDropZone Value="Status.Deleted" class="rz-display-flex rz-flex-column rz-background-color-danger-lighter rz-border-danger-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Drop here to delete" TextStyle="TextStyle.Subtitle2" />
            </RadzenDropZone>
            <RadzenDropZone Value="Status.Bug" class="rz-display-flex rz-flex-column rz-border-danger-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Bugs" TextStyle="TextStyle.Subtitle2" />
            </RadzenDropZone>
        </RadzenStack>
    </ChildContent>
    <Template>
        <RadzenButton Text="@context.task_name" ButtonStyle="ButtonStyle.Secondary" Click="() => ShowTasks(context.Id)" />
    </Template>
</RadzenDropZoneContainer>

<style>
    .dropzone {
        display: flex;
        flex-direction: column;
        border-radius: 8px;
        padding: 12px;
        flex: 1;
        gap: 1rem;
    }
    .warning { background-color: #fff3cd; border: 2px solid #ffecb5; }
    .info { background-color: #d1ecf1; border: 2px solid #bee5eb; }
    .success { background-color: #d4edda; border: 2px solid #c3e6cb; }
    .danger { background-color: #f8d7da; border: 2px solid #f5c6cb; }
    .bug { background-color: #f8d7da; border: 2px solid #f5c6cb; }
</style>

@code {
    private List<TasksList> tasks = new List<TasksList>();

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
    }

    private async Task GetTasks()
    {
        try
        {
            tasks = await DbContext.Tasks.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }

    private async Task CreateItem()
    {
        var newTask = new TasksList
        {
            task_name = "New Task",
            description = "test",
            userId = 1,
            _Status = Status.NotStarted
        };

        try
        {
            DbContext.Tasks.Add(newTask);
            await DbContext.SaveChangesAsync();
            tasks.Add(newTask);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding task: {ex.Message}");
        }
    }

    Func<TasksList, RadzenDropZone<TasksList>, bool> ItemSelector = (item, zone) =>
        item._Status == (Status)zone.Value && item._Status != Status.Deleted;

    Func<RadzenDropZoneItemEventArgs<TasksList>, bool> CanDrop = request =>
    {
        var targetStatus = (Status)request.ToZone.Value;
        var currentStatus = request.Item._Status;

        return targetStatus == Status.Deleted || targetStatus == Status.Bug || targetStatus == Status.NotStarted || targetStatus == Status.Started || 
               targetStatus == Status.Completed || Math.Abs((int)currentStatus - (int)targetStatus) == 1;
    };

    void OnItemRender(RadzenDropZoneItemRenderEventArgs<TasksList> args)
    {
        args.Attributes["class"] = "rz-card rz-variant-filled rz-background-color-primary-light rz-color-on-primary-light";
        args.Visible = args.Item._Status != Status.Deleted;
    }

    async Task OnDrop(RadzenDropZoneItemEventArgs<TasksList> args)
    {
        if (args.FromZone != args.ToZone)
        {
            args.Item._Status = (Status)args.ToZone.Value;

            try
            {
                DbContext.Tasks.Update(args.Item);
                await DbContext.SaveChangesAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating task status: {ex.Message}");
            }
        }

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            tasks.Remove(args.Item);
            tasks.Insert(tasks.IndexOf(args.ToItem), args.Item);
            StateHasChanged();
        }
    }
    private string _title = "";
    private string _description = "";
    private int _currentTaskId = 0;
    
    private async Task ShowTasks(int _taskID)
    {
        var task = tasks.FirstOrDefault(t => t.Id == _taskID);
        if (task == null)
        {
            Console.WriteLine($"Ошибка: Задача с ID {_taskID} не найдена");
            return;
        }
        _currentTaskId = task.Id;
        _title = task.task_name;
        _description = task.description;
        var result = await DialogService.OpenAsync("Task ID: "+@_currentTaskId, ds =>
            @<RadzenStack Gap="1.5rem">
                <p>Title: <RadzenTextBox @bind-Value="_title" Style="width: 100%"/></p>
                <h3>Description: <RadzenTextBox @bind-Value="_description" Style="width: 100%"/></h3>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" AlignItems="Radzen.AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal">
                        <RadzenButton Text="Ok" Click="() => SaveTask()" Style="width: 80px;" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
    }

    private async Task SaveTask()
    {
        var task = tasks.FirstOrDefault(t => t.Id == _currentTaskId);
        if (task == null)
        {
            Console.WriteLine($"Ошибка: Задача с ID {_currentTaskId} не найдена");
            return;
        }
        
        task.task_name = _title;
        task.description = _description;

        DbContext.Tasks.Update(task);
        await DbContext.SaveChangesAsync();
        StateHasChanged();
        
        Console.WriteLine($"Задача сохранена: {task.task_name} - {task.description}");

        DialogService.Close(true);
    }

}
    

