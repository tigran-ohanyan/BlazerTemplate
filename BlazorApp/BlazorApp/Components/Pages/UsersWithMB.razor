@page "/UsersWithMB"
@inject Radzen.DialogService DialogService
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext;
@using Microsoft.AspNetCore.Authorization
@using Blazorise;

@attribute [Authorize(Roles = "administrator")]
@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />


<h2>Users list with MudBlazor component</h2>
<ModalUsers></ModalUsers>
@if (filteredUsers.Count == 0 || users.Count == 0)
{
<p><em>Loading...</em></p>
}
else
{
    <MudTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Items="@filteredUsers">
        <ToolBarContent>
            <MudText Typo="Typo.h6" Color="MudBlazor.Color.Dark">Users List</MudText>
            <MudSpacer />
           
            <MudSpacer />
            <MudTextField @bind-Value="search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0" ></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.id</MudTd>
            <MudTd DataLabel="First Name">@context.first_name</MudTd>
            <MudTd DataLabel="Last Name">@context.last_name</MudTd>
            <MudTd DataLabel="Email">@context.email</MudTd>
            <MudTd DataLabel="Delete">
                <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Error" OnClick="() => DeleteUser(context.id)">Delete</MudButton>
            </MudTd>
            <MudTd DataLabel="Edit">
                <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info" OnClick="() => EditUser(context.id)">Edit</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

}

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string search;
    private List<User> users = new();
    private string email = "";
    private List<User> filteredUsers = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }
    private void OnSearchChanged()
    {
        Console.WriteLine($"aaa - {search}");
        FilterUsers(); // Trigger filtering when search string changes
    }
    protected async Task LoadUsersAsync()
    {
        try
        {
            users = await DbContext.Users.ToListAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }
  
    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u => u.email.Contains(search, StringComparison.OrdinalIgnoreCase) ||
                                             u.first_name.Contains(search, StringComparison.OrdinalIgnoreCase) ||
                                             u.last_name.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        StateHasChanged();
    }
    private async Task DeleteUser(int userId)
    {
        var user = await DbContext.Users.FindAsync(userId);
        if (user != null)
        {
            DbContext.Users.Remove(user);
            await DbContext.SaveChangesAsync();
            await LoadUsersAsync();
        }
    }
    
    private string _firstName = "";
    private string _lastName = "";
    private string _email = "";
    private int _selectedRole = 0;
    private int _currentUserID = 0;
    
    private async Task EditUser(int _userid)
    {
        var user = users.FirstOrDefault(u => u.id == _userid);
        if (user == null)
        {
            Console.WriteLine($"Ошибка: пользователь с ID {_userid} не найдена");
            return;
        }
        
        _firstName = user.first_name;
        _lastName = user.last_name;
        _email = user.email;
        _selectedRole = user.role;
        _currentUserID = user.id;
        
        var result = await DialogService.OpenAsync("Edit user: "+@_userid, ds =>
            @<RadzenStack Gap="1.5rem">
                <p>First Name: <RadzenTextBox @bind-Value="_firstName" Style="width: 100%"/></p>
                <p>Last Name: <RadzenTextBox @bind-Value="_lastName" Style="width: 100%"/></p>
                <p>Email <RadzenTextBox @bind-Value="_email" Style="width: 100%"/></p>
                <div class="input-group">
                    <div class="form-group col-lg-12">
                        <label for="role">Role</label>
                        <Select @bind-SelectedValue="_selectedRole">
                            <SelectItem Value="0">User</SelectItem>
                            <SelectItem Value="1">Moder</SelectItem>
                            <SelectItem Value="2">Admin</SelectItem>
                        </Select>
                    </div>
                </div>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal">
                        <RadzenButton Text="Ok" Click="() => SaveUser()" Style="width: 80px;" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
    }
    
    private async Task SaveUser()
    {
        var user = users.FirstOrDefault(u => u.id == _currentUserID);
        if (user == null)
        {
            Console.WriteLine($"Ошибка: пользователь с ID {_currentUserID} не найдена");
            return;
        }
        
        user.first_name = _firstName;
        user.last_name = _lastName;
        user.email = _email;
        user.role = _selectedRole;

        DbContext.Users.Update(user);
        await DbContext.SaveChangesAsync();
        StateHasChanged();
        
        Console.WriteLine($"Пользователь сохранена: {_currentUserID}");

        DialogService.Close(true);
    }
}