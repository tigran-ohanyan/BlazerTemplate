@page "/UsersWithMB"
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext;

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />
@if (filteredUsers.Count == 0 || users.Count == 0)
{
<p><em>Loading...</em></p>
}
else
{
    <MudTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Items="@filteredUsers">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users List</MudText>
            <MudSpacer />
            <ModalUsers></ModalUsers>
            <MudSpacer />
            <MudTextField @bind-Value="search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" ></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.id</MudTd>
            <MudTd DataLabel="First Name">@context.first_name</MudTd>
            <MudTd DataLabel="Last Name">@context.last_name</MudTd>
            <MudTd DataLabel="Email">@context.email</MudTd>
            <MudTd DataLabel="Delete">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteUser(context.id)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

}

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string search;
    private List<User> users = new();
    private string email = "";
    private List<User> filteredUsers = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }
    private void OnSearchChanged()
    {
        Console.WriteLine($"aaa - {search}");
        FilterUsers(); // Trigger filtering when search string changes
    }
    protected async Task LoadUsersAsync()
    {
        try
        {
            users = await DbContext.Users.ToListAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }
  
    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u => u.email.Contains(search, StringComparison.OrdinalIgnoreCase) ||
                                             u.first_name.Contains(search, StringComparison.OrdinalIgnoreCase) ||
                                             u.last_name.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        StateHasChanged();
    }
    private async Task DeleteUser(int userId)
    {
        var user = await DbContext.Users.FindAsync(userId);
        if (user != null)
        {
            DbContext.Users.Remove(user);
            await DbContext.SaveChangesAsync();
            await LoadUsersAsync();
        }
    }
}