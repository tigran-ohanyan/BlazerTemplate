@page "/Users"
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext;
@inject Radzen.DialogService DialogService
@using Blazorise;

<h2>Users list</h2>
<ModalUsers></ModalUsers>
<div class="input-group mb-3" style="width: 200px;">
    <input @bind="email" @oninput="OnEmailChanged" placeholder="Filter by email" class="form-control"/>

</div>
@if (filteredUsers.Count == 0 || users.Count == 0)
{
<p><em>Loading...</em></p>
}
else
{
<table class="table" style="color: #ffffff !important;">
    <thead>
    <tr>
        <th>Id</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in filteredUsers)
    {
    <tr>
        <td>@user.id</td>
        <td>@user.first_name</td>
        <td>@user.last_name</td>
        <td>@user.email</td>
        <th>
            <button type="button" class="btn btn-danger" @onclick="() => DeleteUser(user.id)">Delete</button>
            <RadzenButton Text="Edit" ButtonStyle="ButtonStyle.Info" Click="() => EditUser(user.id)"/>
        </th>
    </tr>
    }
    </tbody>
</table>
}

@code {

    private List<User> users = new();
    private string email = "";
    private List<User> filteredUsers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    protected async Task LoadUsersAsync()
    {
        try
        {
            users = await DbContext.Users.ToListAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u => u.email.Contains(email, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void OnEmailChanged(ChangeEventArgs e)
    {
        email = e.Value.ToString();
        FilterUsers();
    }

    private async Task DeleteUser(int userId)
    {
        var user = await DbContext.Users.FindAsync(userId);
        if (user != null)
        {
            DbContext.Users.Remove(user);
            await DbContext.SaveChangesAsync();
            await LoadUsersAsync();
        }
    }
    
    private string _firstName = "";
    private string _lastName = "";
    private string _email = "";
    private int _selectedRole = 0;
    private int _currentUserID = 0;
    
    private async Task EditUser(int _userid)
    {
        var user = users.FirstOrDefault(u => u.id == _userid);
        if (user == null)
        {
            Console.WriteLine($"Ошибка: пользователь с ID {_userid} не найдена");
            return;
        }
        
        _firstName = user.first_name;
        _lastName = user.last_name;
        _email = user.email;
        _selectedRole = user.role;
        _currentUserID = user.id;
        
        var result = await DialogService.OpenAsync("Edit user: "+@_userid, ds =>
            @<RadzenStack Gap="1.5rem">
                <p>First Name: <RadzenTextBox @bind-Value="_firstName" Style="width: 100%"/></p>
                <p>Last Name: <RadzenTextBox @bind-Value="_lastName" Style="width: 100%"/></p>
                <p>Email <RadzenTextBox @bind-Value="_email" Style="width: 100%"/></p>
                <div class="input-group">
                    <div class="form-group col-lg-12">
                        <label for="role">Role</label>
                        <Select @bind-SelectedValue="_selectedRole">
                            <SelectItem Value="0">User</SelectItem>
                            <SelectItem Value="1">Moder</SelectItem>
                            <SelectItem Value="2">Admin</SelectItem>
                        </Select>
                    </div>
                </div>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal">
                        <RadzenButton Text="Ok" Click="() => SaveUser()" Style="width: 80px;" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
    }
    
    private async Task SaveUser()
    {
        var user = users.FirstOrDefault(u => u.id == _currentUserID);
        if (user == null)
        {
            Console.WriteLine($"Ошибка: пользователь с ID {_currentUserID} не найдена");
            return;
        }
        
        user.first_name = _firstName;
        user.last_name = _lastName;
        user.email = _email;
        user.role = _selectedRole;

        DbContext.Users.Update(user);
        await DbContext.SaveChangesAsync();
        StateHasChanged();
        
        Console.WriteLine($"Пользователь сохранена: {_currentUserID}");

        DialogService.Close(true);
    }
}