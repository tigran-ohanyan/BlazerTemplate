@page "/login"
@using System.Linq.Dynamic.Core
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Data.ViewModels
@inject ApplicationDbContext DbContext;
@inject NavigationManager navManager;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Email" type="email"/>
                <ValidationMessage For="()=>Model.Username"/>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password"/>
                <ValidationMessage For="()=>Model.Password"/>
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string[] roles = new string[] { "user", "moderator", "administrator" };
    [CascadingParameter] public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm] public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = DbContext.Users.Where(x => x.email == Model.Username).FirstOrDefault();
        if (userAccount is null || userAccount.password != Model.Password)
        {
            errorMessage = "Invalid user name or password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Username),
            new Claim(ClaimTypes.Role, roles[userAccount.role])
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navManager.NavigateTo("/");
    }
    
}